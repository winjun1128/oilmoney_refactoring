import { useEffect, useState } from 'react';
import './MyPage.css';
import axios from 'axios';
import EnergyRecord from './EnergyRecord';

function CarRegist({ cars, setCars, userInfo }) {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [carType, setCarType] = useState("");
    const [fuelType, setFuelType] = useState("ÌúòÎ∞úÏú†");
    const [chargerType, setChargerType] = useState("");

    const fetchCars = async () => {
        try {
            const token = localStorage.getItem("token");

            // Ï∞®Îüâ Î™©Î°ù ÏöîÏ≤≠
            const res = await axios.get("/cars", {
                headers: { Authorization: "Bearer " + token }
            });

            // Í∞Å Ï∞®ÎüâÏùò Ïó∞Î£å Í∏∞Î°ù ÏöîÏ≤≠
            const carsWithRecords = await Promise.all(
                res.data.map(async car => {
                    const recordsRes = await axios.get(`/${car.carId}/energy`, {
                        headers: { Authorization: "Bearer " + token }
                    });
                    return { ...car, fuelRecords: recordsRes.data };
                })
            );

            setCars(carsWithRecords); // ÏÉÅÌÉúÏóê Ìïú Î≤àÎßå Ï†ÄÏû•
        } catch (err) {
            console.error(err);
        }
    };

    useEffect(() => {
        fetchCars();
    }, []);


    const handleAddClick = () => {
        setCarType("");
        setFuelType("ÌúòÎ∞úÏú†");
        setChargerType("");
        setIsModalOpen(true);
    };

    const handleCancel = () => {
        setIsModalOpen(false);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!fuelType) return alert("Ïó∞Î£å ÌÉÄÏûÖÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");
        if (fuelType === "Ï†ÑÍ∏∞Ï∞®" && !chargerType) return alert("Ï∂©Ï†ÑÍ∏∞ ÌÉÄÏûÖÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.");

        try {
            const token = localStorage.getItem("token");
            const carData = { carType, fuelType, chargerType };

            await axios.post("/registcar", carData, {
                headers: { "Authorization": "Bearer " + token }
            });

            fetchCars();
            setCarType("");
            setFuelType("ÌúòÎ∞úÏú†");
            setChargerType("");
            setIsModalOpen(false);
        } catch (error) {
            console.log(error);
            alert("Îì±Î°ù Ïã§Ìå®!");
        }
    };

    const handleDelete = async (car) => {
        if (car.isMain === 'Y') {
            alert("ÎåÄÌëúÏ∞®Îäî ÏÇ≠Ï†úÌï† Ïàò ÏóÜÏäµÎãàÎã§. Îã§Î•∏ Ï∞®Î•º ÎåÄÌëúÏ∞®Î°ú ÏÑ§Ï†ï ÌõÑ ÏÇ≠Ï†úÌï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }

        if (!window.confirm(car.carType + "(" + car.fuelType + ")Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) return;

        try {
            const token = localStorage.getItem("token");

            await axios.post("/deletecar",
                { carId: car.carId },
                { headers: { "Authorization": "Bearer " + token } }
            );
            //setCars(prev => prev.filter(c => c.carId !== car.carId));
            fetchCars();
        } catch (error) {
            console.log(error);
            alert("ÏÇ≠Ï†ú Ïã§Ìå®!");
        }
    };

    const setMainCar = async (car, carId) => {
        const confirmed = window.confirm(car.carType + "(" + car.fuelType + ")ÏúºÎ°ú ÏÑ§Ï†ïÌïòÏãúÍ≤†ÏäµÎãàÍπå?");
        if (!confirmed) return;
        try {
            await axios.post("/setmain", null, {
                params: { userId: userInfo.userId, carId }
            });
            fetchCars();
        } catch (err) {
            console.error(err);
            alert("ÎåÄÌëúÏ∞® Î≥ÄÍ≤Ω Ïã§Ìå®");
        }
    };

    // Ïó∞Î£å ÌÉÄÏûÖ ÏòµÏÖò
    const fuelOptions = [
        { label: "ÌúòÎ∞úÏú†", icon: "fa-solid fa-gas-pump" },
        { label: "Í≤ΩÏú†", icon: "fa-solid fa-truck" },
        { label: "LPG", icon: "fa-solid fa-fire-flame-simple" },
        { label: "Ï†ÑÍ∏∞Ï∞®", icon: "fa-solid fa-bolt" }
    ];

    // Ï∂©Ï†ÑÍ∏∞ ÌÉÄÏûÖ ÏòµÏÖò
    const chargerOptions = [
        { code: "01", label: "DCÏ∞®Îç∞Î™®" },
        { code: "02", label: "ACÏôÑÏÜç" },
        { code: "04", label: "DCÏΩ§Î≥¥" },
        { code: "07", label: "AC3ÏÉÅ" }
    ];

    const getChargerLabel = (code) => {
        const option = chargerOptions.find(opt => opt.code === code);
        return option ? option.label : "";
    };

    return (
        <div className="car-container">
            <div className='edit-title'>
                <span className='edit-title-text'>ÎÇ¥ Ï∞® Í¥ÄÎ¶¨</span>
                <button type="button" className='edit-button' onClick={handleAddClick}>Îì±Î°ù</button>
            </div>

            <div className='mypage-regist-contents'>
                {cars.length === 0 ? (
                    <span className='mypage-regist-info'>Îì±Î°ùÎêú Ï∞®ÎüâÏù¥ ÏóÜÏäµÎãàÎã§.</span>
                ) : (
                    <div className="cars-container">
                        {cars.map(car => (
                            <div key={car.carId} className={`car-card ${car.isMain === 'Y' ? 'main-car-card' : ''}`}>
                                {/* Ï∞®Îüâ Ìó§Îçî */}
                                <div className="car-header">
                                    <img src="/images/mypage/suv.png" alt={car.carType} className="car-photo" />
                                    <div className='car-title'>
                                        <div className="car-basic-info">
                                            <h3 className="car-nickname">{car.nickname || "ÎÇ¥ Ï∞®"}</h3>
                                            <span>Î™®Îç∏Î™Ö: {car.carType || "-"}</span><br></br>
                                            <span>Ïó∞Î£å: {car.fuelType}</span><br></br>
                                            {car.fuelType === "Ï†ÑÍ∏∞Ï∞®" && car.chargerType && (
                                                <span>Ï∂©Ï†ÑÍ∏∞ ÌÉÄÏûÖ: {getChargerLabel(car.chargerType)}</span>
                                            )}
                                            {car.isMain === 'Y' && <span className="main-label">ÎåÄÌëúÏ∞®</span>}
                                        </div>
                                        {/* Ïï°ÏÖò Î≤ÑÌäº */}
                                        <div className="car-actions">
                                            {car.isMain !== 'Y' && (
                                                <button className="set-main-btn" onClick={() => setMainCar(car, car.carId)}>ÎåÄÌëúÏ∞®Î°ú ÏÑ§Ï†ï</button>
                                            )}
                                            <button className="car-delete-btn" onClick={() => handleDelete(car)}>
                                                <i className="fa-solid fa-xmark"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>

                                <EnergyRecord car={car} />
                            </div>
                        ))}
                    </div>
                )}
            </div>

            {/* üöó Î™®Îã¨ */}
            {isModalOpen && (
                <div className="car-modal-overlay">
                    <div className="car-modal-content">
                        <h2 className="car-modal-title">Ï∞®Îüâ Îì±Î°ù</h2>
                        <form onSubmit={handleSubmit}>
                            <div>
                                <label className='car-contents'>Î™®Îç∏Î™Ö : </label>
                                <input type="text" className='car-model' value={carType} onChange={(e) => setCarType(e.target.value)} placeholder="Ïòà: ÏÜåÎÇòÌÉÄ" />
                            </div>

                            <div style={{ marginTop: "15px" }}>
                                <label className='car-contents'>Ïó∞Î£å Ï¢ÖÎ•ò : </label>
                                <div className="fuel-select">
                                    {fuelOptions.map(fuel => (
                                        <div key={fuel.label} className={`fuel-option ${fuelType === fuel.label ? "active" : ""}`} onClick={() => setFuelType(fuel.label)} >
                                            <i className={fuel.icon} style={{ marginRight: "6px" }}></i>
                                            {fuel.label}
                                        </div>
                                    ))}
                                </div>
                            </div>

                            {fuelType === "Ï†ÑÍ∏∞Ï∞®" && (
                                <div style={{ marginTop: "15px" }}>
                                    <label className='car-contents'>Ï∂©Ï†ÑÍ∏∞ ÌÉÄÏûÖ : </label>
                                    <div className="fuel-select">
                                        {chargerOptions.map(option => (
                                            <div
                                                key={option.code}
                                                className={`fuel-option ${chargerType === option.code ? "active" : ""}`}
                                                onClick={() => setChargerType(option.code)}
                                            >
                                                {option.label}
                                            </div>
                                        ))}
                                    </div>
                                </div>
                            )}

                            <div className="modal-buttons">
                                <button type="button" className="modal-button cancel" onClick={handleCancel}>Ï∑®ÏÜå</button>
                                <button type="submit" className="modal-button submit">Îì±Î°ù</button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    )
}

export default CarRegist;
