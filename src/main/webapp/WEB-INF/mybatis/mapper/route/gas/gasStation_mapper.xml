<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="gasStation_mapper">

  <insert id="mergeOne" parameterType="GasStation">
    MERGE INTO t_gas_station t
    USING (SELECT #{uniCd} AS uni_cd FROM dual) s
    ON (t.uni_cd = s.uni_cd)
    WHEN MATCHED THEN UPDATE SET
      brand = #{brand},
      brand_group = #{brandGroup},
      name = #{name},
      tel = #{tel},
      addr = #{addr},
      addr_old = #{addrOld},
      sido_cd = #{sidoCd},
      sigun_cd = #{sigunCd},
      self_yn = #{selfYn},
      cvs_yn = #{cvsYn},
      car_wash_yn = #{carWashYn},
      maint_yn = #{maintYn},
      kpetro_yn = #{kpetroYn},
      lpg_yn = #{lpgYn},
      open_24h_yn = #{open24hYn},
      x_katec = #{xKatec},
      y_katec = #{yKatec},
      x_web = #{xWeb},
      y_web = #{yWeb},
      lon = #{lon},
      lat = #{lat},
      price_gasoline = #{priceGasoline},
      price_diesel   = #{priceDiesel},
      price_premium  = #{pricePremium},
      price_kerosene = #{priceKerosene},
      price_lpg      = #{priceLpg},
      price_updated_at = SYSTIMESTAMP,
      modified_ymd = CASE WHEN #{modifiedYmd} IS NOT NULL
                          THEN TO_DATE(#{modifiedYmd}, 'YYYYMMDD')
                          ELSE NULL END,
      updated_at = SYSTIMESTAMP

    WHEN NOT MATCHED THEN INSERT (
      uni_cd, brand, brand_group, name, tel, addr, addr_old, sido_cd, sigun_cd,
      self_yn, cvs_yn, car_wash_yn, maint_yn, kpetro_yn, lpg_yn, open_24h_yn,
      x_katec, y_katec, x_web, y_web, lon, lat,
      price_gasoline, price_diesel, price_premium, price_kerosene, price_lpg, price_updated_at,
      modified_ymd, created_at, updated_at
    ) VALUES (
      #{uniCd}, #{brand}, #{brandGroup}, #{name}, #{tel}, #{addr}, #{addrOld}, #{sidoCd}, #{sigunCd},
      #{selfYn}, #{cvsYn}, #{carWashYn}, #{maintYn}, #{kpetroYn}, #{lpgYn}, #{open24hYn},
      #{xKatec}, #{yKatec}, #{xWeb}, #{yWeb}, #{lon}, #{lat},
      #{priceGasoline}, #{priceDiesel}, #{pricePremium}, #{priceKerosene}, #{priceLpg}, SYSTIMESTAMP,
      CASE WHEN #{modifiedYmd} IS NOT NULL THEN TO_DATE(#{modifiedYmd}, 'YYYYMMDD') ELSE NULL END,
      SYSTIMESTAMP, SYSTIMESTAMP
    )
  </insert>

  <!-- 대량 저장용: 서비스에서 loop 돌리는 방식을 권장
       (ExecutorType.BATCH로 성능 확보) -->
       
     <!-- 전체 조회 (옵션: sidoCd, sigunCd) -->
  <select id="selectAll" parameterType="map" resultType="GasStation">
    SELECT
      uni_cd, brand, brand_group, name, tel,
      addr, addr_old, sido_cd, sigun_cd,
      self_yn, cvs_yn, car_wash_yn, maint_yn, kpetro_yn, lpg_yn, open_24h_yn,
      x_katec, y_katec, x_web, y_web, lon, lat,
      price_gasoline, price_diesel, price_premium, price_kerosene, price_lpg, price_updated_at,
      modified_ymd, created_at, updated_at
    FROM t_gas_station
    <where>
      <if test="sidoCd != null and sidoCd != ''">
        AND sido_cd = #{sidoCd}
      </if>
      <if test="sigunCd != null and sigunCd != ''">
        AND sigun_cd = #{sigunCd}
      </if>
    </where>
    ORDER BY uni_cd
  </select>
  
  <!-- 전체 UNI_CD 리스트 -->
<select id="selectAllUniCd" resultType="string">
  SELECT uni_cd
  FROM t_gas_station
  ORDER BY uni_cd
</select>
  
  
  
</mapper>
